SaltStack 采用 C/S模式，server端就是salt的master，client端就是minion，minion与master之间通过ZeroMQ消息队列通信
minion上线后先与master端联系，把自己的pub key发过去，这时master端通过salt-key -L命令就会看到minion的key，接受该
minion-key后，也就是master与minion已经互信

master下发ls命令到minion 具体步骤如下:
1.Salt stack的Master与Minion之间通过ZeroMq进行消息传递，使用了ZeroMq的发布-订阅模式，连接方式包括tcp，ipc;
2.salt命令，将cmd.run ls命令从salt.client.LocalClient.cmd_cli发布到master，获取一个Jodid，根据jobid获取命令执行结果;
3.master接收到命令后，将要执行的命令发送给客户端minion;
4.minion从消息总线上接收到要处理的命令，交给minion._handle_aes处理;
5.minion._handle_aes发起一个本地线程调用cmdmod执行ls命令。线程执行完ls后，调用minion._return_pub方法，将执行结果通过消息总线返回给master;
6.master接收到客户端返回的结果，调用master._handle_aes方法，将结果写的文件中;
7.salt.client.LocalClient.cmd_cli通过轮询获取Job执行结果，将结果输出到终端。


相关命令：
## 测试被控主机的连通性
salt '*' test.ping

salt-key:
salt-key -L 查看key列表
salt-key -a KYENAME #允许一个key
salt-key -A  #允许所有
salt-key -d KEYNAME #删除一个key
salt-key -D #删除所有key

#使用正则表达式:
 salt -E 'test[0-9]' test.ping

#指定列表
 salt -L 'test1,test2' test.ping
 salt -N test-server test.ping
#拷贝文件
 salt-cp '*' salt-file.txt /tmp/

#查看客户端状态
 salt-run manage.status
 salt-run manage.versions
 
#Job
 salt-run jobs.list_jobs   //列出当前master jobs cache中的所有job
 salt '172.17.0.1' saltutil.running  //查看正在执行的任务
 salt '172.17.0.1' saltutil.kill_job 20190905155731642293 //删除正在运行的任务
 salt-run  jobs.active  //查看所有minion当前正在运行的jobs（在所有minion上运行saltutil.running)
 salt-run jobs.lookup_jid <jid>   //从master jobs cache中查询指定的jid的运行结果
 saltutil.term_job <jid>   //终止指定的jid进程（信号为15）
 saltutil.kill_job <jid>   //终止指定的jid进程（信号为9）
 
 
 salt-run manage.up   //查看存活的minion
 salt-run manage.down  //查看死掉的minion
 salt-run manage.down removekeys=True  //查看down掉的minion，并将其删除
 salt-run manage.status  //查看minion的相关状态
 salt-run manage.versions  //查看slat的所有master和minion的版本信息
 
